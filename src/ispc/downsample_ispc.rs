#[allow(non_camel_case_types,dead_code,non_upper_case_globals,non_snake_case,improper_ctypes)]
pub mod downsample_ispc {
/* automatically generated by rust-bindgen 0.69.2 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WeightDimensions {
    pub src_center: f32,
    pub src_start: f32,
    pub src_end: f32,
}
#[test]
fn bindgen_test_layout_WeightDimensions() {
    const UNINIT: ::std::mem::MaybeUninit<WeightDimensions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WeightDimensions>(),
        12usize,
        concat!("Size of: ", stringify!(WeightDimensions))
    );
    assert_eq!(
        ::std::mem::align_of::<WeightDimensions>(),
        4usize,
        concat!("Alignment of ", stringify!(WeightDimensions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_center) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WeightDimensions),
            "::",
            stringify!(src_center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_start) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WeightDimensions),
            "::",
            stringify!(src_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WeightDimensions),
            "::",
            stringify!(src_end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SampleWeights {
    pub vertical_weights: *const WeightCollection,
    pub horizontal_weights: *const WeightCollection,
}
#[test]
fn bindgen_test_layout_SampleWeights() {
    const UNINIT: ::std::mem::MaybeUninit<SampleWeights> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SampleWeights>(),
        16usize,
        concat!("Size of: ", stringify!(SampleWeights))
    );
    assert_eq!(
        ::std::mem::align_of::<SampleWeights>(),
        8usize,
        concat!("Alignment of ", stringify!(SampleWeights))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertical_weights) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleWeights),
            "::",
            stringify!(vertical_weights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontal_weights) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SampleWeights),
            "::",
            stringify!(horizontal_weights)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WeightCollection {
    pub starts: *const u32,
    pub weight_counts: *const u32,
    pub values: *const *const f32,
}
#[test]
fn bindgen_test_layout_WeightCollection() {
    const UNINIT: ::std::mem::MaybeUninit<WeightCollection> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WeightCollection>(),
        24usize,
        concat!("Size of: ", stringify!(WeightCollection))
    );
    assert_eq!(
        ::std::mem::align_of::<WeightCollection>(),
        8usize,
        concat!("Alignment of ", stringify!(WeightCollection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).starts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WeightCollection),
            "::",
            stringify!(starts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight_counts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WeightCollection),
            "::",
            stringify!(weight_counts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WeightCollection),
            "::",
            stringify!(values)
        )
    );
}
extern "C" {
    pub fn calculate_weight_variables(
        filter_scale: f32,
        src: u32,
        target: u32,
        out_variables: *mut WeightDimensions,
    );
}
extern "C" {
    pub fn calculate_weights(
        image_scale: f32,
        filter_scale: f32,
        vars: *const WeightDimensions,
        weights: *mut f32,
    );
}
extern "C" {
    pub fn resample_with_cached_weights_3(
        src_width: u32,
        src_height: u32,
        target_width: u32,
        target_height: u32,
        cached_weights: *const SampleWeights,
        scratch_space: *mut u8,
        src_data: *const u8,
        out_data: *mut u8,
    );
}
extern "C" {
    pub fn resample_with_cached_weights_4(
        src_width: u32,
        src_height: u32,
        target_width: u32,
        target_height: u32,
        cached_weights: *const SampleWeights,
        scratch_space: *mut u8,
        src_data: *const u8,
        out_data: *mut u8,
    );
}
extern "C" {
    pub fn scale_to_alpha_coverage(
        source_width: u32,
        source_height: u32,
        source_data: *const u8,
        downsampled_width: u32,
        downsampled_height: u32,
        downsampled_image_data: *mut u8,
        alpha_cutoff: *const f32,
    );
}
}