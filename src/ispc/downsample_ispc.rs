#[allow(non_camel_case_types,dead_code,non_upper_case_globals,non_snake_case,improper_ctypes)]
pub mod downsample_ispc {
/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WeightDimensions {
    pub src_center: f32,
    pub src_start: f32,
    pub src_end: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WeightDimensions"][::std::mem::size_of::<WeightDimensions>() - 12usize];
    ["Alignment of WeightDimensions"][::std::mem::align_of::<WeightDimensions>() - 4usize];
    ["Offset of field: WeightDimensions::src_center"]
        [::std::mem::offset_of!(WeightDimensions, src_center) - 0usize];
    ["Offset of field: WeightDimensions::src_start"]
        [::std::mem::offset_of!(WeightDimensions, src_start) - 4usize];
    ["Offset of field: WeightDimensions::src_end"]
        [::std::mem::offset_of!(WeightDimensions, src_end) - 8usize];
};
unsafe extern "C" {
    pub fn calculate_weights_lanczos(
        image_scale: f32,
        filter_scale: f32,
        dimensions: *const WeightDimensions,
        weights: *mut f32,
    );
}
unsafe extern "C" {
    pub fn scale_to_alpha_coverage(
        source_width: u32,
        source_height: u32,
        source_data: *const u8,
        downsampled_width: u32,
        downsampled_height: u32,
        downsampled_image_data: *mut u8,
        alpha_cutoff: *const f32,
    );
}
pub const NormalMapFormat_R8g8b8: NormalMapFormat = 0;
pub const NormalMapFormat_R8g8TangentSpaceReconstructedZ: NormalMapFormat = 1;
pub type NormalMapFormat = ::std::os::raw::c_uint;
pub const PixelFormat_Rgba8Unorm: PixelFormat = 0;
pub const PixelFormat_Rgb8Unorm: PixelFormat = 1;
pub const PixelFormat_Rgba8Snorm: PixelFormat = 2;
pub const PixelFormat_Rgb8Snorm: PixelFormat = 3;
pub type PixelFormat = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SourceImage {
    pub width: u32,
    pub height: u32,
    pub data: *const u8,
    pub pixel_stride: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SourceImage"][::std::mem::size_of::<SourceImage>() - 24usize];
    ["Alignment of SourceImage"][::std::mem::align_of::<SourceImage>() - 8usize];
    ["Offset of field: SourceImage::width"][::std::mem::offset_of!(SourceImage, width) - 0usize];
    ["Offset of field: SourceImage::height"][::std::mem::offset_of!(SourceImage, height) - 4usize];
    ["Offset of field: SourceImage::data"][::std::mem::offset_of!(SourceImage, data) - 8usize];
    ["Offset of field: SourceImage::pixel_stride"]
        [::std::mem::offset_of!(SourceImage, pixel_stride) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DownsampledImage {
    pub width: u32,
    pub height: u32,
    pub data: *mut u8,
    pub pixel_stride: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DownsampledImage"][::std::mem::size_of::<DownsampledImage>() - 24usize];
    ["Alignment of DownsampledImage"][::std::mem::align_of::<DownsampledImage>() - 8usize];
    ["Offset of field: DownsampledImage::width"]
        [::std::mem::offset_of!(DownsampledImage, width) - 0usize];
    ["Offset of field: DownsampledImage::height"]
        [::std::mem::offset_of!(DownsampledImage, height) - 4usize];
    ["Offset of field: DownsampledImage::data"]
        [::std::mem::offset_of!(DownsampledImage, data) - 8usize];
    ["Offset of field: DownsampledImage::pixel_stride"]
        [::std::mem::offset_of!(DownsampledImage, pixel_stride) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SampleWeights {
    pub vertical_weights: *const WeightCollection,
    pub horizontal_weights: *const WeightCollection,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SampleWeights"][::std::mem::size_of::<SampleWeights>() - 16usize];
    ["Alignment of SampleWeights"][::std::mem::align_of::<SampleWeights>() - 8usize];
    ["Offset of field: SampleWeights::vertical_weights"]
        [::std::mem::offset_of!(SampleWeights, vertical_weights) - 0usize];
    ["Offset of field: SampleWeights::horizontal_weights"]
        [::std::mem::offset_of!(SampleWeights, horizontal_weights) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DownsamplingContext {
    pub weights: SampleWeights,
    pub scratch_space: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DownsamplingContext"][::std::mem::size_of::<DownsamplingContext>() - 24usize];
    ["Alignment of DownsamplingContext"][::std::mem::align_of::<DownsamplingContext>() - 8usize];
    ["Offset of field: DownsamplingContext::weights"]
        [::std::mem::offset_of!(DownsamplingContext, weights) - 0usize];
    ["Offset of field: DownsamplingContext::scratch_space"]
        [::std::mem::offset_of!(DownsamplingContext, scratch_space) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WeightCollection {
    pub starts: *const u32,
    pub weight_counts: *const u32,
    pub values: *const *const f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WeightCollection"][::std::mem::size_of::<WeightCollection>() - 24usize];
    ["Alignment of WeightCollection"][::std::mem::align_of::<WeightCollection>() - 8usize];
    ["Offset of field: WeightCollection::starts"]
        [::std::mem::offset_of!(WeightCollection, starts) - 0usize];
    ["Offset of field: WeightCollection::weight_counts"]
        [::std::mem::offset_of!(WeightCollection, weight_counts) - 8usize];
    ["Offset of field: WeightCollection::values"]
        [::std::mem::offset_of!(WeightCollection, values) - 16usize];
};
unsafe extern "C" {
    pub fn downsample_normal_map(
        src: *const SourceImage,
        dst: *mut DownsampledImage,
        normal_map_format: NormalMapFormat,
    );
}
unsafe extern "C" {
    pub fn resample_with_cached_weights_3(
        src: *const SourceImage,
        dst: *mut DownsampledImage,
        pixel_format: PixelFormat,
        ctx: *mut DownsamplingContext,
    );
}
unsafe extern "C" {
    pub fn resample_with_cached_weights_4(
        src: *const SourceImage,
        dst: *mut DownsampledImage,
        pixel_format: PixelFormat,
        ctx: *mut DownsamplingContext,
    );
}
unsafe extern "C" {
    pub fn calculate_weight_dimensions(
        filter_scale: f32,
        src: u32,
        target: u32,
        out_dimensions: *mut WeightDimensions,
    );
}
}